{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is FRAM?","text":"The version of FRAM that is currently published is a beta version.    <p>FRAM is an open-source modelling framework developed by the Norwegian Water Resources and Energy Directorate (NVE) that allows you to build and run different power market models and compare them against each other. It gets data from a common model-neutral database and efficiently performs all necessary data transformations and operations needed to build a model, solve it, and get the results.</p> <p></p> <p>FRAM simplifies working with models for analysts and reduces the time needed to build and run power market models and get results. It ensures consistency between models, as they are created from the same dataset. Each model is only integrated into the model framework once, and then the analysts can run models and scenarios, sequentially or in parallel, adjusting the workflow depending on the specific analysis.</p> <p>Contact: fram@nve.no</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Universal and model independent design - you can connect any power market model to FRAM. In this repository, you can find API and tutorials for running an open-source power market model JulES.</li> <li>Innovative data processing system - FRAM can efficiently perform complex operations like aggregation, disaggregation, and can handle different units and time dimensions.</li> <li>Fast and efficient - data processing in FRAM is designed to be fast and have efficient memory use.</li> <li>Modular and flexible - you can extend the core model or replace components with your own.</li> </ul>"},{"location":"#fram-packages","title":"FRAM Packages","text":"<p>FRAM consists of several Python packages:</p> <p></p> <p>We suggest installing or downloading FRAM demo to explore FRAM. It will install all other packages automatically for you.</p> <p>You will find documentation of each package following these links:</p> <ul> <li>FRAM core</li> <li>FRAM data</li> <li>FRAM JulES</li> </ul>"},{"location":"how_fram_works/","title":"How FRAM works","text":"<p>We are still working on this description, more information will come soon.</p> <p>The main component of FRAM is the core model that creates a python object Model() that holds the data from the database. Data in the model object is transformed depending on what is required by the given power market model. Data is imported from the database using populator class in FRAM data package.  </p> <p>Architecture of FRAM</p> <p></p> <p>The model object contains high-level components (python objects) that hold the data about a specific element in the power system, for example power plants, demand, transmission etc. High-level components can be represented as low-level components - flows and nodes. For example, demand is a node with a flow arrow towards the node, while production is a node with flow arrow away from the node.</p> <p>Different kinds of nodes can be defined - emission nodes, power nodes, fuel nodes etc. In this way the system supports modelling not only power market but also other adjacent markets - heat market, emission market, gas market etc.</p> <p>Data in the core model can be easily manipulated - aggregated, disaggregated, converted with respect to different units and time resolution, etc. This is how data can be staged for a given energy marked model run.</p> <p>For more details about the core model, see FRAM core.</p> <p>For more details about the database and data package, see FRAM data.</p> <p>For more information about the JulES API, see FRAM JuLES.</p>"},{"location":"how_to_add_model/","title":"How to add a new power market model?","text":"<p>We are still working on this instruction; more detailed information will come soon. In the meantime you can contact fram@nve.no</p> <p>To integrate a new model into FRAM you should develop a FRAM API for the model. Use JulES solver from our simple demo as an example. </p> <p>Use interfaces defined in FRAM core to define the necessary classes: Solver, Populator, etc. </p> <p>There are two ways of integration with the core model: </p> <ul> <li> <p>Use high-level components (thermal, demand etc) or reuse existing components. For example, if your model needs a smart house component, try to define it using existing components demand and solar power. You can also define your own components - in this case you have to update the populator so that it knows about the new components.  Using high-level components may be easier in the start, but it may lead to a lot of duplicate code if components have many similar properties.</p> </li> <li> <p>Recommended: Use low-level components: flow and node. These are the most basic components in the FRAM core model, and if you spend some time in the start understanding how they work, you can write \"clean\" and reusable python code and avoid a lot of duplicate code. See our examples with JulES model to learn how to use flow and node.</p> </li> </ul>"},{"location":"how_to_contact/","title":"How to contact us?","text":"<p>Do you want to know more about FRAM or contribute into the development?</p> <p>Are you trying to run the demo or use FRAM and have problems?</p> <p>Do not hesitate to contact us at fram@nve.no!</p>"},{"location":"installation_and_demo/","title":"Installation and demo","text":"<p>We recommend that you set up our simple demo to get started with FRAM. Go to the demo page on GitHub and follow the installation steps. </p> <p>Demo installation will install all the necessary dependenies for FRAM and all FRAM packages. It will also install an open-source power market model JulES and a demo dataset so that you can run a simple modelling case and see how FRAM works. </p>"},{"location":"installation_and_demo/#separate-installation-of-fram-packages-and-demo-dataset","title":"Separate installation of FRAM packages and demo dataset","text":"<p>If you still want to install different packages separately, you can use:</p> <pre><code>  pip install fram-core\n</code></pre> <p></p> <pre><code>  pip install fram-data\n</code></pre> <p></p> <pre><code>  pip install fram-jules\n</code></pre> <p></p> <p>To download the dataset separately, go to FRAM demo dataset and download the zip-file.</p>"},{"location":"why_is_it_called/","title":"Why is it called FRAM?","text":"<p>FRAM is derived from the English word \"framework\". But it is also the name of the Norwegian ship that due to its innovative design managed to sail farthest towards the North Pole and the South Pole than any other ship did before.</p>      \"What, however, may be said to be new is the fact that we not only realized that the ship ought to have such a form, but that we gave it that form, as well as the necessary strength for resisting great ice-pressure, and that this was the guiding idea in the whole work of construction.\u201d          \u2014 Fridtjof Nansen, \u201cFarthest North\u201d, 1897 <p></p>"},{"location":"why_we_developed/","title":"Why we developed FRAM","text":"<p>At the Norwegian Water Resources and Energy Directorate (NVE) modelling is widely used to understand short-term and long-term developments in the power market. The possibility to run many models, many scenarios and compare them with each other is crucial for understanding the increasing complexity of the changing energy system. We saw a clear need to create a system that enables flexible and efficient use of different energy and power market models as different models are good at solving different problems. Therefore, we developed this modelling framework FRAM to support our analysts so that we could continue delivering quick and high-quality analyses in the future.\u202f </p> <p>Over time, we have transitioned from a fragmented landscape of Python scripts developed by different individuals, along with manual data handling and orchestration between models, to a unified system that meets our needs and ambitions. FRAM users can easily run the models they need, switch between models, and compare results \u2014 all within a unified and user-friendly environment. FRAM simplifies onboarding and training of new employees, reduces the risk of errors, and promotes consistency in analysis as all energy market models are built from the same database. We also wanted a modular system built on fast, efficient code and smart solutions \u2014 a tool that empowers both analysts and developers to work more effectively and collaboratively. </p> <p>Transparency has been a key priority. FRAM is completely open-source, and we at NVE hope that this system will be adopted by the industry and academia and will benefit the whole society. We encourage external stakeholders to contribute to FRAM development and create APIs for different power- and energy market models.   </p> <p>FRAM has been developed by a team of professional Python developers in collaboration with NVE\u2019s analysts, combining domain expertise in energy system analysis and modelling with professional software development skills. This collaboration between analysts and developers has ensured a robust framework that balances technical performance with practical usability \u2014 tailored to the needs of both users and contributors. </p> <p> One of NVE's key areas of responsibility is understanding the power market. Here showing S\u00e5heim hydropower plant in Telemark, Norway.</p>"}]}